name: Deploy to UiPath Orchestrator

on:
  push:
    branches:
      - main

env:
  ORCHESTRATOR_URL: ${{ secrets.ORCHESTRATOR_URL }}
  ORCHESTRATOR_TENANT: ${{ secrets.ORCHESTRATOR_TENANT }}
  ORCHESTRATOR_FOLDER: ${{ secrets.ORCHESTRATOR_FOLDER }}
  ORCHESTRATOR_APP_ID: ${{ secrets.ORCHESTRATOR_APP_ID }}
  ORCHESTRATOR_APP_SECRET: ${{ secrets.ORCHESTRATOR_APP_SECRET }}

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.5.3

      - name: Install UiPath CLI
        run: |
          # Install necessary tools if needed
          # Example: choco install uipath -y

      - name: Authenticate to Orchestrator
        id: authenticate
        run: |
          $authHeaders = @{
            'Content-Type' = 'application/json'
          }
          $authBody = @{
            'grant_type'    = 'refresh_token'
            'client_id'     = $env:ORCHESTRATOR_APP_ID
            'refresh_token' = $env:ORCHESTRATOR_APP_SECRET
          }
          $authResponse = Invoke-RestMethod -Uri "$env:ORCHESTRATOR_URL/identity_/connect/token" -Headers $authHeaders -Method Post -Body ($authBody | ConvertTo-Json)
          echo "::set-output name=accessToken::$($authResponse.access_token)"

      - name: Get Latest Package Version
        id: get_latest_version
        run: |
          $accessToken = ${{ steps.authenticate.outputs.accessToken }}
          $latestPackage = Invoke-RestMethod -Uri "$env:ORCHESTRATOR_URL/odata/Packages?\$top=1&\$orderby=Version desc" -Headers @{ 'Authorization' = "Bearer $accessToken" } -Method Get
          $newPackageVersion = $latestPackage.value[0].Version + 1
          echo "::set-output name=newPackageVersion::$newPackageVersion"

      - name: Deploy Package to Orchestrator
        run: |
          $accessToken = ${{ steps.authenticate.outputs.accessToken }}
          $packagePath = "$env:GITHUB_WORKSPACE\free.nupkg"  # Update with your package path
          $packageHeaders = @{
            'Authorization' = "Bearer $accessToken"
          }
          $uploadResponse = Invoke-RestMethod -Uri "$env:ORCHESTRATOR_URL/odata/RobotFeeds/UiPath.Server.Configuration.OData.UploadPackages" -Headers $packageHeaders -Method Post -InFile $packagePath
          $packageId = $uploadResponse.Id

          $deployHeaders = @{
            'Authorization'          = "Bearer $accessToken"
            'X-UIPATH-OrganizationUnitId' = $env:ORCHESTRATOR_FOLDER
            'X-UIPATH-PackageId'      = $packageId
            'Content-Type'           = 'application/json'
          }
          $deployBody = @{
            'EnvironmentId' = $env:ORCHESTRATOR_ENVIRONMENT_ID
            'Name'          = "DeploymentName"
          }
          $deploymentResponse = Invoke-RestMethod -Uri "$env:ORCHESTRATOR_URL/odata/Releases/UiPath.Server.Configuration.OData.Deploy" -Headers $deployHeaders -Method Post -Body ($deployBody | ConvertTo-Json)
